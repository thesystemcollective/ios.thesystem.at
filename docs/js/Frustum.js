import{O as t,V as e}from"./Object3D.js";import{S as n}from"./BufferGeometry.js";import{P as o}from"./Triangle.js";function r(){t.call(this),this.type="Group"}r.prototype=Object.assign(Object.create(t.prototype),{constructor:r,isGroup:!0});const s=new n,i=new e;class c{constructor(t,e,n,r,s,i){this.planes=[void 0!==t?t:new o,void 0!==e?e:new o,void 0!==n?n:new o,void 0!==r?r:new o,void 0!==s?s:new o,void 0!==i?i:new o]}set(t,e,n,o,r,s){const i=this.planes;return i[0].copy(t),i[1].copy(e),i[2].copy(n),i[3].copy(o),i[4].copy(r),i[5].copy(s),this}clone(){return(new this.constructor).copy(this)}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t){const e=this.planes,n=t.elements,o=n[0],r=n[1],s=n[2],i=n[3],c=n[4],p=n[5],a=n[6],m=n[7],l=n[8],u=n[9],h=n[10],y=n[11],d=n[12],x=n[13],f=n[14],z=n[15];return e[0].setComponents(i-o,m-c,y-l,z-d).normalize(),e[1].setComponents(i+o,m+c,y+l,z+d).normalize(),e[2].setComponents(i+r,m+p,y+u,z+x).normalize(),e[3].setComponents(i-r,m-p,y-u,z-x).normalize(),e[4].setComponents(i-s,m-a,y-h,z-f).normalize(),e[5].setComponents(i+s,m+a,y+h,z+f).normalize(),this}intersectsObject(t){const e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),s.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(s)}intersectsSprite(t){return s.center.set(0,0,0),s.radius=.7071067811865476,s.applyMatrix4(t.matrixWorld),this.intersectsSphere(s)}intersectsSphere(t){const e=this.planes,n=t.center,o=-t.radius;for(let t=0;t<6;t++){if(e[t].distanceToPoint(n)<o)return!1}return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const o=e[n];if(i.x=o.normal.x>0?t.max.x:t.min.x,i.y=o.normal.y>0?t.max.y:t.min.y,i.z=o.normal.z>0?t.max.z:t.min.z,o.distanceToPoint(i)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}}export{c as F,r as G};
