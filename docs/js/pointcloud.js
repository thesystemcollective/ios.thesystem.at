import{v as n}from"../main.js";import{VideoTexture as t,NearestFilter as e,BufferGeometry as o,BufferAttribute as i,ShaderMaterial as r,AdditiveBlending as a,Points as l}from"./three.module.js";const p=p=>{const s=D.createElement("video");s.setAttribute("id",n),s.setAttribute("loop",!0),s.setAttribute("muted",!0);const v=`/video/pointcloud/${p}/${p}`;["webm","mp4"].forEach((n=>{const t=D.createElement("source");t.setAttribute("src",`${v}.${n}`),t.setAttribute("type","video/"+n),s.appendChild(t)})),B.appendChild(s);const c=new t(s);c.minFilter=e;const f=640,m=new o,u=new Float32Array(921600);for(let n=0,t=0;n<u.length;n+=3,t++)u[n]=t%f,u[n+1]=Math.floor(t/f);m.setAttribute("position",new i(u,3));const d=new r({uniforms:{map:{value:c},width:{value:f},height:{value:480},nearClipping:{value:1},farClipping:{value:5},pointSize:{value:2},zOffset:{value:0}},vertexShader:"\nuniform sampler2D map;\n\nuniform float width;\nuniform float height;\nuniform float nearClipping, farClipping;\n\nuniform float pointSize;\nuniform float zOffset;\n\nvarying vec2 vUv;\n\nconst float XtoZ = 1.11146; // tan( 1.0144686 / 2.0 ) * 2.0;\nconst float YtoZ = 0.83359; // tan( 0.7898090 / 2.0 ) * 2.0;\n\nvoid main() {\n\n  vUv = vec2( position.x / width, position.y / height );\n\n  vec4 color = texture2D( map, vUv );\n  float depth = ( color.r + color.g + color.b ) / 3.0;\n\n  float z = ( 1.0 - depth ) * (farClipping - nearClipping) + nearClipping;\n\n  vec4 pos = vec4(\n    ( position.x / width - 0.5 ) * z * XtoZ,\n    ( position.y / height - 0.5 ) * z * YtoZ,\n    - z + zOffset,\n    1.0);\n\n  gl_PointSize = pointSize;\n  gl_Position = projectionMatrix * modelViewMatrix * pos;\n}\n",fragmentShader:"\nuniform sampler2D map;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 color = texture2D( map, vUv );\n  gl_FragColor = vec4( color.r, color.g, color.b, 0.2 );\n}\n",blending:a,depthTest:!1,depthWrite:!1,transparent:!0});return new l(m,d)};export{p as pointcloud};
