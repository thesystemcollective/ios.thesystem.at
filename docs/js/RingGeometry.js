import"./MathUtils.js";import"./constants.js";import"./Color.js";import"./Quaternion.js";import{V as t}from"./Object3D.js";import{B as e,V as s,F as r}from"./BufferGeometry.js";import"./Face3.js";import{G as o}from"./Geometry.js";class i extends o{constructor(t,e,s,r,o,i){super(),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:s,phiSegments:r,thetaStart:o,thetaLength:i},this.fromBufferGeometry(new a(t,e,s,r,o,i)),this.mergeVertices()}}class a extends e{constructor(e,o,i,a,n,h){super(),this.type="RingBufferGeometry",this.parameters={innerRadius:e,outerRadius:o,thetaSegments:i,phiSegments:a,thetaStart:n,thetaLength:h},e=e||.5,o=o||1,n=void 0!==n?n:0,h=void 0!==h?h:2*Math.PI,i=void 0!==i?Math.max(3,i):8;const m=[],p=[],u=[],c=[];let f=e;const y=(o-e)/(a=void 0!==a?Math.max(1,a):1),d=new t,x=new s;for(let t=0;t<=a;t++){for(let t=0;t<=i;t++){const e=n+t/i*h;d.x=f*Math.cos(e),d.y=f*Math.sin(e),p.push(d.x,d.y,d.z),u.push(0,0,1),x.x=(d.x/o+1)/2,x.y=(d.y/o+1)/2,c.push(x.x,x.y)}f+=y}for(let t=0;t<a;t++){const e=t*(i+1);for(let t=0;t<i;t++){const s=t+e,r=s,o=s+i+1,a=s+i+2,n=s+1;m.push(r,o,n),m.push(o,a,n)}}this.setIndex(m),this.setAttribute("position",new r(p,3)),this.setAttribute("normal",new r(u,3)),this.setAttribute("uv",new r(c,2))}}export{a as RingBufferGeometry,i as RingGeometry};
