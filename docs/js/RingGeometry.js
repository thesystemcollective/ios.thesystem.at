import"./main.js";import{c1 as t,B as e,a3 as s,a6 as r,F as i}from"./HemisphereLight.js";class a extends t{constructor(t,e,s,r,i,a){super(),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:s,phiSegments:r,thetaStart:i,thetaLength:a},this.fromBufferGeometry(new h(t,e,s,r,i,a)),this.mergeVertices()}}class h extends e{constructor(t,e,a,h,n,o){super(),this.type="RingBufferGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:a,phiSegments:h,thetaStart:n,thetaLength:o},t=t||.5,e=e||1,n=void 0!==n?n:0,o=void 0!==o?o:2*Math.PI,a=void 0!==a?Math.max(3,a):8;const u=[],m=[],p=[],c=[];let d=t;const x=(e-t)/(h=void 0!==h?Math.max(1,h):1),f=new s,g=new r;for(let t=0;t<=h;t++){for(let t=0;t<=a;t++){const s=n+t/a*o;f.x=d*Math.cos(s),f.y=d*Math.sin(s),m.push(f.x,f.y,f.z),p.push(0,0,1),g.x=(f.x/e+1)/2,g.y=(f.y/e+1)/2,c.push(g.x,g.y)}d+=x}for(let t=0;t<h;t++){const e=t*(a+1);for(let t=0;t<a;t++){const s=t+e,r=s,i=s+a+1,h=s+a+2,n=s+1;u.push(r,i,n),u.push(i,h,n)}}this.setIndex(u),this.setAttribute("position",new i(m,3)),this.setAttribute("normal",new i(p,3)),this.setAttribute("uv",new i(c,2))}}export{h as RingBufferGeometry,a as RingGeometry};
