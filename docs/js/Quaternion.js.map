{"version":3,"file":"Quaternion.js","sources":["../../node_modules/three/src/math/Quaternion.js"],"sourcesContent":["import { MathUtils } from './MathUtils.js';\n\nclass Quaternion {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tObject.defineProperty( this, 'isQuaternion', { value: true } );\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\tstatic slerp( qa, qb, qm, t ) {\n\n\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t}\n\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tlet s = 1 - t;\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tconst tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tconst x0 = src0[ srcOffset0 ];\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 ];\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget w() {\n\n\t\treturn this._w;\n\n\t}\n\n\tset w( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t}\n\n\tcopy( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromEuler( euler, update ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update !== false ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAxisAngle( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromUnitVectors( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tconst EPS = 0.000001;\n\n\t\tlet r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < EPS ) {\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t}\n\n\tangleTo( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t}\n\n\trotateTowards( q, step ) {\n\n\t\tconst angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tconst t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t}\n\n\tinverse() {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t}\n\n\tconjugate() {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t}\n\n\tnormalize() {\n\n\t\tlet l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t}\n\n\tpremultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t}\n\n\tmultiplyQuaternions( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerp( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tconst s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize();\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tequals( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t}\n\n\tfromArray( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n}\n\n\nexport { Quaternion };\n"],"names":["Quaternion","[object Object]","x","y","z","w","Object","defineProperty","this","value","_x","_y","_z","_w","qa","qb","qm","t","copy","slerp","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","s","cos","dir","sqrSin","Number","EPSILON","sin","Math","sqrt","len","atan2","tDir","f","_onChangeCallback","constructor","quaternion","euler","update","isEuler","Error","order","_order","c1","c2","c3","s1","s2","s3","axis","angle","halfAngle","m","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","vFrom","vTo","r","dot","abs","normalize","q","acos","MathUtils","clamp","step","angleTo","min","set","conjugate","v","l","length","p","undefined","multiplyQuaternions","a","b","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","array","offset","attribute","index","getX","getY","getZ","getW","callback"],"mappings":"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"}