{"version":3,"file":"index.js","sources":["../../node_modules/three/src/materials/SpriteMaterial.js","../../node_modules/three/src/objects/Sprite.js","../../node_modules/three/src/core/Raycaster.js","../../src/lib/three/HUD/index.js"],"sourcesContent":["import { Material } from './Material.js';\nimport { Color } from '../math/Color.js';\n\n/**\n * parameters = {\n *  color: <hex>,\n *  map: new THREE.Texture( <Image> ),\n *  alphaMap: new THREE.Texture( <Image> ),\n *  rotation: <float>,\n *  sizeAttenuation: <bool>\n * }\n */\n\nfunction SpriteMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'SpriteMaterial';\n\n\tthis.color = new Color( 0xffffff );\n\n\tthis.map = null;\n\n\tthis.alphaMap = null;\n\n\tthis.rotation = 0;\n\n\tthis.sizeAttenuation = true;\n\n\tthis.transparent = true;\n\n\tthis.setValues( parameters );\n\n}\n\nSpriteMaterial.prototype = Object.create( Material.prototype );\nSpriteMaterial.prototype.constructor = SpriteMaterial;\nSpriteMaterial.prototype.isSpriteMaterial = true;\n\nSpriteMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.rotation = source.rotation;\n\n\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\treturn this;\n\n};\n\n\nexport { SpriteMaterial };\n","import { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Triangle } from '../math/Triangle.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { InterleavedBuffer } from '../core/InterleavedBuffer.js';\nimport { InterleavedBufferAttribute } from '../core/InterleavedBufferAttribute.js';\nimport { SpriteMaterial } from '../materials/SpriteMaterial.js';\n\nlet _geometry;\n\nconst _intersectPoint = new Vector3();\nconst _worldScale = new Vector3();\nconst _mvPosition = new Vector3();\n\nconst _alignedPosition = new Vector2();\nconst _rotatedPosition = new Vector2();\nconst _viewWorldMatrix = new Matrix4();\n\nconst _vA = new Vector3();\nconst _vB = new Vector3();\nconst _vC = new Vector3();\n\nconst _uvA = new Vector2();\nconst _uvB = new Vector2();\nconst _uvC = new Vector2();\n\nfunction Sprite( material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Sprite';\n\n\tif ( _geometry === undefined ) {\n\n\t\t_geometry = new BufferGeometry();\n\n\t\tconst float32Array = new Float32Array( [\n\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t] );\n\n\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t}\n\n\tthis.geometry = _geometry;\n\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\tthis.center = new Vector2( 0.5, 0.5 );\n\n}\n\nSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Sprite,\n\n\tisSprite: true,\n\n\traycast: function ( raycaster, intersects ) {\n\n\t\tif ( raycaster.camera === null ) {\n\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t}\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t}\n\n\t\tconst rotation = this.material.rotation;\n\t\tlet sin, cos;\n\n\t\tif ( rotation !== 0 ) {\n\n\t\t\tcos = Math.cos( rotation );\n\t\t\tsin = Math.sin( rotation );\n\n\t\t}\n\n\t\tconst center = this.center;\n\n\t\ttransformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t_uvA.set( 0, 0 );\n\t\t_uvB.set( 1, 0 );\n\t\t_uvC.set( 1, 1 );\n\n\t\t// check first triangle\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\n\n\t\tif ( intersect === null ) {\n\n\t\t\t// check second triangle\n\t\t\ttransformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t_uvB.set( 0, 1 );\n\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectPoint.clone(),\n\t\t\tuv: Triangle.getUV( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\tthis.material = source.material;\n\n\t\treturn this;\n\n\t}\n\n} );\n\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t// compute position in camera space\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t// to check if rotation is not zero\n\tif ( sin !== undefined ) {\n\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t} else {\n\n\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t}\n\n\n\tvertexPosition.copy( mvPosition );\n\tvertexPosition.x += _rotatedPosition.x;\n\tvertexPosition.y += _rotatedPosition.y;\n\n\t// transform to world space\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n}\n\nexport { Sprite };\n","import { Ray } from '../math/Ray.js';\nimport { Layers } from './Layers.js';\n\nfunction Raycaster( origin, direction, near, far ) {\n\n\tthis.ray = new Ray( origin, direction );\n\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\tthis.near = near || 0;\n\tthis.far = far || Infinity;\n\tthis.camera = null;\n\tthis.layers = new Layers();\n\n\tthis.params = {\n\t\tMesh: {},\n\t\tLine: { threshold: 1 },\n\t\tLOD: {},\n\t\tPoints: { threshold: 1 },\n\t\tSprite: {}\n\t};\n\n\tObject.defineProperties( this.params, {\n\t\tPointCloud: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\treturn this.Points;\n\n\t\t\t}\n\t\t}\n\t} );\n\n}\n\nfunction ascSort( a, b ) {\n\n\treturn a.distance - b.distance;\n\n}\n\nfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t}\n\n\tif ( recursive === true ) {\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t}\n\n\t}\n\n}\n\nObject.assign( Raycaster.prototype, {\n\n\tset: function ( origin, direction ) {\n\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.ray.set( origin, direction );\n\n\t},\n\n\tsetFromCamera: function ( coords, camera ) {\n\n\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\tthis.camera = camera;\n\n\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\tthis.camera = camera;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t}\n\n\t},\n\n\tintersectObject: function ( object, recursive, optionalTarget ) {\n\n\t\tconst intersects = optionalTarget || [];\n\n\t\tintersectObject( object, this, intersects, recursive );\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t},\n\n\tintersectObjects: function ( objects, recursive, optionalTarget ) {\n\n\t\tconst intersects = optionalTarget || [];\n\n\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\treturn intersects;\n\n\t\t}\n\n\t\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t}\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n} );\n\n\nexport { Raycaster };\n","import { OrthographicCamera } from 'three/src/cameras/OrthographicCamera.js'\nimport { Scene } from 'three/src/scenes/Scene.js'\nimport { TextureLoader } from 'three/src/loaders/TextureLoader.js'\nimport { Sprite } from 'three/src/objects/Sprite.js'\n// import { SpriteMaterial } from 'three/src/materials/SpriteMaterial.js'\nimport { Raycaster } from 'three/src/core/Raycaster.js'\n\nexport const HUD = {\n  init() {\n    const halfWidth = window.innerWidth / 2\n    const halfHeight = window.innerHeight / 2\n\n    this.camera = new OrthographicCamera(-halfWidth, halfWidth, halfHeight, -halfHeight, 1, 10)\n    this.camera.position.z = 10;\n\n    this.scene = new Scene()\n\n    this.scene.add(this.camera)\n\n    const textureLoader = new TextureLoader()\n    textureLoader.load(\"textures/sprite0.png\", this.create)\n\n    this.raycaster = new Raycaster()\n  },\n\n  clickListener(e) {\n    const x = (e.clientX / window.innerWidth) * 2 - 1;\n    const y = -(e.clientY / window.innerHeight) * 2 + 1;\n\n    this.raycaster.setFromCamera({ x, y }, this.camera);\n\n    const intersects = this.raycaster.intersectObjects([this.exitButton], true)\n\n    if (intersects.length > 0) {\n      const clickedObject = intersects[0]\n\n      console.log(clickedObject)\n    } else {\n      console.warn('click with no intersections')\n    }\n  },\n\n  render(renderer) {\n    // make sure the HUD is on top\n    renderer.clearDepth()\n    renderer.render(this.scene, this.camera)\n  },\n\n  createSprite({ material, center = [0, 1] }) {\n    const btn = new Sprite(material)\n    btn.center.set(...center)\n    btn.scale.set(width, height, 1)\n\n    this.scene.add(btn)\n\n    document.body.addEventListener('click', this.clickListener.bind(this))\n\n    return btn\n  },\n\n  create(texture) {\n    const material = new SpriteMaterial({ map: texture })\n\n    // Top Left\n    // this.topLeftButton = this.createSprite({ material, center: [0, 1]})\n\n    // Top Right\n    // this.topRightButton = this.createSprite({ material, center: [1, 1] })\n\n    // Bottom left\n    // this.bottomLeftButton = this.createSprite({ material, center: [0, 0] })\n\n    // Bottom Right\n    this.exitButton = this.createSprite({ material, center: [0, 1] })\n\n    // centered\n    // this.centerButton = this.createSprite({ material, center: [0.5, 0.5] })\n\n    this.update()\n  },\n\n  onWindowResize() {\n    const halfWidth = window.innerWidth / 2\n    const halfHeight = window.innerHeight / 2\n\n    this.camera.left = -halfWidth\n    this.camera.right = halfWidth\n    this.camera.top = halfHeight\n    this.camera.bottom = -halfHeight\n    this.camera.updateProjectionMatrix()\n\n    this.update()\n  },\n\n  update() {\n    const width = window.innerWidth / 2;\n    const height = window.innerHeight / 2;\n\n    // this.topLeftButton.position.set(-width, height, 1); // top left\n    // this.topRightButton.position.set(width, height, 1); // top right\n    // this.bottomLeftButton.position.set(-width, -height, 1); // bottom left\n    this.exitButton.position.set(width, -height, 1); // bottom right\n    // this.centerButton.position.set(0, 0, 1); // center\n  },\n}"],"names":["SpriteMaterial","parameters","Material","call","this","type","color","Color","map","alphaMap","rotation","sizeAttenuation","transparent","setValues","_geometry","prototype","Object","create","constructor","isSpriteMaterial","copy","source","_intersectPoint","Vector3","_worldScale","_mvPosition","_alignedPosition","Vector2","_rotatedPosition","_viewWorldMatrix","Matrix4","_vA","_vB","_vC","_uvA","_uvB","_uvC","Sprite","material","Object3D","undefined","BufferGeometry","float32Array","Float32Array","interleavedBuffer","InterleavedBuffer","setIndex","setAttribute","InterleavedBufferAttribute","geometry","center","transformVertex","vertexPosition","mvPosition","scale","sin","cos","subVectors","addScalar","multiply","x","y","applyMatrix4","Raycaster","origin","direction","near","far","ray","Ray","Infinity","camera","layers","Layers","params","Mesh","Line","threshold","LOD","Points","defineProperties","PointCloud","get","ascSort","a","b","distance","intersectObject","object","raycaster","intersects","recursive","test","raycast","children","i","l","length","assign","isSprite","setFromMatrixScale","matrixWorld","modelViewMatrix","multiplyMatrices","matrixWorldInverse","setFromMatrixPosition","isPerspectiveCamera","multiplyScalar","z","Math","set","intersect","intersectTriangle","distanceTo","push","point","clone","uv","Triangle","getUV","face","setFromCamera","coords","unproject","sub","normalize","isOrthographicCamera","transformDirection","optionalTarget","sort","intersectObjects","objects","Array","isArray","HUD","[object Object]","halfWidth","window","innerWidth","halfHeight","innerHeight","OrthographicCamera","position","scene","Scene","add","TextureLoader","load","e","clientX","clientY","exitButton","renderer","clearDepth","render","btn","width","height","document","body","addEventListener","clickListener","bind","texture","createSprite","update","left","right","top","bottom","updateProjectionMatrix"],"mappings":"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"}