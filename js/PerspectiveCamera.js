import{M as t}from"./MathUtils.js";import{O as i,M as e,V as s}from"./Object3D.js";function o(){i.call(this),this.type="Camera",this.matrixWorldInverse=new e,this.projectionMatrix=new e,this.projectionMatrixInverse=new e}function r(t,i,e,s){o.call(this),this.type="PerspectiveCamera",this.fov=void 0!==t?t:50,this.zoom=1,this.near=void 0!==e?e:.1,this.far=void 0!==s?s:2e3,this.focus=10,this.aspect=void 0!==i?i:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}o.prototype=Object.assign(Object.create(i.prototype),{constructor:o,isCamera:!0,copy:function(t,e){return i.prototype.copy.call(this,t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this},getWorldDirection:function(t){void 0===t&&(t=new s),this.updateMatrixWorld(!0);const i=this.matrixWorld.elements;return t.set(-i[8],-i[9],-i[10]).normalize()},updateMatrixWorld:function(t){i.prototype.updateMatrixWorld.call(this,t),this.matrixWorldInverse.getInverse(this.matrixWorld)},updateWorldMatrix:function(t,e){i.prototype.updateWorldMatrix.call(this,t,e),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),r.prototype=Object.assign(Object.create(o.prototype),{constructor:r,isPerspectiveCamera:!0,copy:function(t,i){return o.prototype.copy.call(this,t,i),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this},setFocalLength:function(i){const e=.5*this.getFilmHeight()/i;this.fov=2*t.RAD2DEG*Math.atan(e),this.updateProjectionMatrix()},getFocalLength:function(){const i=Math.tan(.5*t.DEG2RAD*this.fov);return.5*this.getFilmHeight()/i},getEffectiveFOV:function(){return 2*t.RAD2DEG*Math.atan(Math.tan(.5*t.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(t,i,e,s,o,r){this.aspect=t/i,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=i,this.view.offsetX=e,this.view.offsetY=s,this.view.width=o,this.view.height=r,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){let i=this.near,e=i*Math.tan(.5*t.DEG2RAD*this.fov)/this.zoom,s=2*e,o=this.aspect*s,r=-.5*o,a=this.view;if(null!==this.view&&this.view.enabled){const t=a.fullWidth,i=a.fullHeight;r+=a.offsetX*o/t,e-=a.offsetY*s/i,o*=a.width/t,s*=a.height/i}const h=this.filmOffset;0!==h&&(r+=i*h/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+o,e,e-s,i,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(t){const e=i.prototype.toJSON.call(this,t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}});var a=Object.freeze({__proto__:null,PerspectiveCamera:r});export{o as C,r as P,a};
//# sourceMappingURL=PerspectiveCamera.js.map
