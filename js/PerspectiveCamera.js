import{M as t}from"./MathUtils.js";import"./Quaternion.js";import{O as i}from"./Object3D.js";import{C as e}from"./Camera.js";function s(t,i,s,o){e.call(this),this.type="PerspectiveCamera",this.fov=void 0!==t?t:50,this.zoom=1,this.near=void 0!==s?s:.1,this.far=void 0!==o?o:2e3,this.focus=10,this.aspect=void 0!==i?i:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}s.prototype=Object.assign(Object.create(e.prototype),{constructor:s,isPerspectiveCamera:!0,copy:function(t,i){return e.prototype.copy.call(this,t,i),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this},setFocalLength:function(i){const e=.5*this.getFilmHeight()/i;this.fov=2*t.RAD2DEG*Math.atan(e),this.updateProjectionMatrix()},getFocalLength:function(){const i=Math.tan(.5*t.DEG2RAD*this.fov);return.5*this.getFilmHeight()/i},getEffectiveFOV:function(){return 2*t.RAD2DEG*Math.atan(Math.tan(.5*t.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(t,i,e,s,o,h){this.aspect=t/i,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=i,this.view.offsetX=e,this.view.offsetY=s,this.view.width=o,this.view.height=h,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){let i=this.near,e=i*Math.tan(.5*t.DEG2RAD*this.fov)/this.zoom,s=2*e,o=this.aspect*s,h=-.5*o,f=this.view;if(null!==this.view&&this.view.enabled){const t=f.fullWidth,i=f.fullHeight;h+=f.offsetX*o/t,e-=f.offsetY*s/i,o*=f.width/t,s*=f.height/i}const a=this.filmOffset;0!==a&&(h+=i*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(h,h+o,e,e-s,i,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(t){const e=i.prototype.toJSON.call(this,t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}});export{s as PerspectiveCamera};
//# sourceMappingURL=PerspectiveCamera.js.map
