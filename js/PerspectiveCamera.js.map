{"version":3,"file":"PerspectiveCamera.js","sources":["../../node_modules/three/src/cameras/PerspectiveCamera.js"],"sourcesContent":["import { Camera } from './Camera.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { MathUtils } from '../math/MathUtils.js';\n\nfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\tCamera.call( this );\n\n\tthis.type = 'PerspectiveCamera';\n\n\tthis.fov = fov !== undefined ? fov : 50;\n\tthis.zoom = 1;\n\n\tthis.near = near !== undefined ? near : 0.1;\n\tthis.far = far !== undefined ? far : 2000;\n\tthis.focus = 10;\n\n\tthis.aspect = aspect !== undefined ? aspect : 1;\n\tthis.view = null;\n\n\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\tthis.updateProjectionMatrix();\n\n}\n\nPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\tconstructor: PerspectiveCamera,\n\n\tisPerspectiveCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength: function ( focalLength ) {\n\n\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength: function () {\n\n\t\tconst vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t},\n\n\tgetEffectiveFOV: function () {\n\n\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t},\n\n\tgetFilmWidth: function () {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t},\n\n\tgetFilmHeight: function () {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t},\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   const w = 1920;\n\t *   const h = 1080;\n\t *   const fullWidth = w * 3;\n\t *   const fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function () {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tlet near = this.near,\n\t\t\ttop = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\theight = 2 * top,\n\t\t\twidth = this.aspect * height,\n\t\t\tleft = - 0.5 * width,\n\t\t\tview = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tconst skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tconst data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n\nexport { PerspectiveCamera };\n"],"names":["PerspectiveCamera","fov","aspect","near","far","Camera","call","this","type","undefined","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","prototype","Object","assign","create","constructor","isPerspectiveCamera","copy","source","recursive","setFocalLength","focalLength","vExtentSlope","getFilmHeight","MathUtils","RAD2DEG","Math","atan","getFocalLength","tan","DEG2RAD","getEffectiveFOV","getFilmWidth","min","max","setViewOffset","fullWidth","fullHeight","x","y","width","height","enabled","offsetX","offsetY","clearViewOffset","top","left","skew","projectionMatrix","makePerspective","projectionMatrixInverse","getInverse","toJSON","meta","data","Object3D","object"],"mappings":"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"}