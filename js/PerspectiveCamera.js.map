{"version":3,"file":"PerspectiveCamera.js","sources":["../../node_modules/three/src/cameras/Camera.js","../../node_modules/three/src/cameras/PerspectiveCamera.js"],"sourcesContent":["import { Matrix4 } from '../math/Matrix4.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { Vector3 } from '../math/Vector3.js';\n\nfunction Camera() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Camera';\n\n\tthis.matrixWorldInverse = new Matrix4();\n\n\tthis.projectionMatrix = new Matrix4();\n\tthis.projectionMatrixInverse = new Matrix4();\n\n}\n\nCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Camera,\n\n\tisCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\treturn this;\n\n\t},\n\n\tgetWorldDirection: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t},\n\n\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\tObject3D.prototype.updateWorldMatrix.call( this, updateParents, updateChildren );\n\n\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n} );\n\nexport { Camera };\n","import { Camera } from './Camera.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { MathUtils } from '../math/MathUtils.js';\n\nfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\tCamera.call( this );\n\n\tthis.type = 'PerspectiveCamera';\n\n\tthis.fov = fov !== undefined ? fov : 50;\n\tthis.zoom = 1;\n\n\tthis.near = near !== undefined ? near : 0.1;\n\tthis.far = far !== undefined ? far : 2000;\n\tthis.focus = 10;\n\n\tthis.aspect = aspect !== undefined ? aspect : 1;\n\tthis.view = null;\n\n\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\tthis.updateProjectionMatrix();\n\n}\n\nPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\tconstructor: PerspectiveCamera,\n\n\tisPerspectiveCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength: function ( focalLength ) {\n\n\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength: function () {\n\n\t\tconst vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t},\n\n\tgetEffectiveFOV: function () {\n\n\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t},\n\n\tgetFilmWidth: function () {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t},\n\n\tgetFilmHeight: function () {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t},\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   const w = 1920;\n\t *   const h = 1080;\n\t *   const fullWidth = w * 3;\n\t *   const fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function () {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tlet near = this.near,\n\t\t\ttop = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\theight = 2 * top,\n\t\t\twidth = this.aspect * height,\n\t\t\tleft = - 0.5 * width,\n\t\t\tview = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tconst skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tconst data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n\nexport { PerspectiveCamera };\n"],"names":["Camera","Object3D","call","this","type","matrixWorldInverse","Matrix4","projectionMatrix","projectionMatrixInverse","PerspectiveCamera","fov","aspect","near","far","undefined","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","prototype","Object","assign","create","constructor","isCamera","copy","source","recursive","getWorldDirection","target","Vector3","updateMatrixWorld","e","matrixWorld","elements","set","normalize","force","getInverse","updateWorldMatrix","updateParents","updateChildren","clone","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","MathUtils","RAD2DEG","Math","atan","getFocalLength","tan","DEG2RAD","getEffectiveFOV","getFilmWidth","min","max","setViewOffset","fullWidth","fullHeight","x","y","width","height","enabled","offsetX","offsetY","clearViewOffset","top","left","skew","makePerspective","toJSON","meta","data","object"],"mappings":"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"}