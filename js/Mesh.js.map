{"version":3,"file":"Mesh.js","sources":["../../node_modules/three/src/objects/Mesh.js"],"sourcesContent":["import { Vector3 } from '../math/Vector3.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Sphere } from '../math/Sphere.js';\nimport { Ray } from '../math/Ray.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { Triangle } from '../math/Triangle.js';\nimport { Face3 } from '../core/Face3.js';\nimport { DoubleSide, BackSide } from '../constants.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\n\nconst _inverseMatrix = new Matrix4();\nconst _ray = new Ray();\nconst _sphere = new Sphere();\n\nconst _vA = new Vector3();\nconst _vB = new Vector3();\nconst _vC = new Vector3();\n\nconst _tempA = new Vector3();\nconst _tempB = new Vector3();\nconst _tempC = new Vector3();\n\nconst _morphA = new Vector3();\nconst _morphB = new Vector3();\nconst _morphC = new Vector3();\n\nconst _uvA = new Vector2();\nconst _uvB = new Vector2();\nconst _uvC = new Vector2();\n\nconst _intersectionPoint = new Vector3();\nconst _intersectionPointWorld = new Vector3();\n\nfunction Mesh( geometry, material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Mesh';\n\n\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\tthis.material = material !== undefined ? material : new MeshBasicMaterial();\n\n\tthis.updateMorphTargets();\n\n}\n\nMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Mesh,\n\n\tisMesh: true,\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t},\n\n\tupdateMorphTargets: function () {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\tconst keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\traycast: function ( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere );\n\t\t_sphere.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix.getInverse( matrixWorld );\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\t// Check boundingBox before continuing\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\tlet intersection;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst position = geometry.attributes.position;\n\t\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\tconst uv = geometry.attributes.uv;\n\t\t\tconst uv2 = geometry.attributes.uv2;\n\t\t\tconst groups = geometry.groups;\n\t\t\tconst drawRange = geometry.drawRange;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t// indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tconst end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\tconst a = index.getX( j );\n\t\t\t\t\t\t\tconst b = index.getX( j + 1 );\n\t\t\t\t\t\t\tconst c = index.getX( j + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\t\tconst b = index.getX( i + 1 );\n\t\t\t\t\t\tconst c = index.getX( i + 2 );\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tconst end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\t\tconst c = j + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\tconst a = i;\n\t\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\t\tconst c = i + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tconst isMultiMaterial = Array.isArray( material );\n\n\t\t\tconst vertices = geometry.vertices;\n\t\t\tconst faces = geometry.faces;\n\t\t\tlet uvs;\n\n\t\t\tconst faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\tfor ( let f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\tconst face = faces[ f ];\n\t\t\t\tconst faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\tconst fvA = vertices[ face.a ];\n\t\t\t\tconst fvB = vertices[ face.b ];\n\t\t\t\tconst fvC = vertices[ face.c ];\n\n\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\n\n\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\tconst uvs_f = uvs[ f ];\n\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection.face = face;\n\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n} );\n\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tlet intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t_vA.fromBufferAttribute( position, a );\n\t_vB.fromBufferAttribute( position, b );\n\t_vC.fromBufferAttribute( position, c );\n\n\tconst morphInfluences = object.morphTargetInfluences;\n\n\tif ( material.morphTargets && morphPosition && morphInfluences ) {\n\n\t\t_morphA.set( 0, 0, 0 );\n\t\t_morphB.set( 0, 0, 0 );\n\t\t_morphC.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\tconst influence = morphInfluences[ i ];\n\t\t\tconst morphAttribute = morphPosition[ i ];\n\n\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t} else {\n\n\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_vA.add( _morphA );\n\t\t_vB.add( _morphB );\n\t\t_vC.add( _morphC );\n\n\t}\n\n\tif ( object.isSkinnedMesh ) {\n\n\t\tobject.boneTransform( a, _vA );\n\t\tobject.boneTransform( b, _vB );\n\t\tobject.boneTransform( c, _vC );\n\n\t}\n\n\tconst intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv2 ) {\n\n\t\t\t_uvA.fromBufferAttribute( uv2, a );\n\t\t\t_uvB.fromBufferAttribute( uv2, b );\n\t\t\t_uvC.fromBufferAttribute( uv2, c );\n\n\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t}\n\n\t\tconst face = new Face3( a, b, c );\n\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\tintersection.face = face;\n\n\t}\n\n\treturn intersection;\n\n}\n\nexport { Mesh };\n"],"names":["_inverseMatrix","Matrix4","_ray","Ray","_sphere","Sphere","_vA","Vector3","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","Vector2","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","geometry","material","Object3D","call","this","type","undefined","BufferGeometry","MeshBasicMaterial","updateMorphTargets","checkIntersection","object","raycaster","ray","pA","pB","pC","point","intersect","side","BackSide","intersectTriangle","DoubleSide","copy","applyMatrix4","matrixWorld","distance","origin","distanceTo","near","far","clone","checkBufferGeometryIntersection","position","morphPosition","morphTargetsRelative","uv","uv2","a","b","c","fromBufferAttribute","morphInfluences","morphTargetInfluences","morphTargets","set","i","il","length","influence","morphAttribute","addScaledVector","sub","add","isSkinnedMesh","boneTransform","intersection","Triangle","getUV","face","Face3","getNormal","normal","prototype","Object","assign","create","constructor","isMesh","source","slice","morphTargetDictionary","isBufferGeometry","morphAttributes","keys","m","ml","name","String","push","raycast","intersects","boundingSphere","computeBoundingSphere","intersectsSphere","getInverse","boundingBox","intersectsBox","index","attributes","groups","drawRange","Array","isArray","group","groupMaterial","materialIndex","j","Math","max","start","jl","min","count","getX","faceIndex","floor","isGeometry","isMultiMaterial","vertices","faces","uvs","faceVertexUvs","f","fl","faceMaterial","fvA","fvB","fvC","uvs_f"],"mappings":"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"}